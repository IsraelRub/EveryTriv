services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: everytriv-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: everytriv_production
      POSTGRES_USER: everytriv_prod
      POSTGRES_PASSWORD: EvTr!v_Pr0d_P@ssw0rd_2025_S3cur3!
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U everytriv_prod -d everytriv_production"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - everytriv-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: everytriv-redis
    restart: unless-stopped
    command: redis-server --requirepass R3d!s_Pr0d_P@ssw0rd_2025_S3cur3!
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - everytriv-network

  # Backend Server
  server:
    build: 
      context: ./server
      dockerfile: Dockerfile
    container_name: everytriv-server
    restart: unless-stopped
    env_file:
      - ./server/.env.prod
    ports:
      - '3001:3001'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./server/logs:/app/logs
    networks:
      - everytriv-network

  # Frontend Client
  client:
    build: 
      context: ./client
      dockerfile: Dockerfile
      args:
        - ENV_FILE=.env.prod
    container_name: everytriv-client
    restart: unless-stopped
    ports:
      - '3000:3000'
    depends_on:
      - server
    networks:
      - everytriv-network

  # WebDB - Modern web-based database client
  webdb:
    image: webdb/app:latest
    container_name: everytriv-webdb
    restart: unless-stopped
    ports:
      - "127.0.0.1:22071:22071"
    volumes:
      - webdb_data:/usr/src/app/static/version
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - everytriv-network

volumes:
  postgres_data:
  redis_data:
  webdb_data:

networks:
  everytriv-network:
    driver: bridge