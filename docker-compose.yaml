services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: everytriv-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: everytriv
      POSTGRES_USER: everytriv_user
      POSTGRES_PASSWORD: test123
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U everytriv_user -d everytriv"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - everytriv-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: everytriv-redis
    restart: unless-stopped
    command: redis-server --requirepass R3d!s_Pr0d_P@ssw0rd_2025_S3cur3!
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - everytriv-network

  # Backend Server
  server:
    build: 
      context: .
      dockerfile: server/Dockerfile
      args:
        NODE_ENV: prod
        DATABASE_HOST: postgres
        DATABASE_PORT: 5432
        DATABASE_USERNAME: everytriv_user
        DATABASE_NAME: everytriv
        REDIS_HOST: redis
        REDIS_PORT: 6379
        PORT: 3002
        LANGUAGE_TOOL_API_KEY: ${LANGUAGE_TOOL_API_KEY:-your-language-tool-api-key-here}
    container_name: everytriv-server
    restart: unless-stopped
    environment:
      - NODE_ENV=prod
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=everytriv_user
      - DATABASE_NAME=everytriv
      - DATABASE_SCHEMA=public
      - DATABASE_SSL=false
      - DATABASE_PASSWORD=test123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=R3d!s_Pr0d_P@ssw0rd_2025_S3cur3!
      - JWT_SECRET=${JWT_SECRET:-change-this-in-production}
      - JWT_EXPIRES_IN=1d
      - PORT=3002
      - CORS_ORIGIN=http://localhost:3000
      - LOG_LEVEL=info
      - LOG_FILE_PATH=./logs/app.log
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - MAX_FILE_SIZE=10485760
      - UPLOAD_PATH=./uploads
      - LANGUAGE_TOOL_API_KEY=${LANGUAGE_TOOL_API_KEY:-your-language-tool-api-key-here}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-493943099709-hpmbtnc9fjrtksic99i6ht2p7bhgm2ml.apps.googleusercontent.com}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-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}
    ports:
      - '3002:3002'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./server/logs:/app/logs
    networks:
      - everytriv-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Frontend Client
  client:
    build: 
      context: .
      dockerfile: client/Dockerfile
    container_name: everytriv-client
    restart: unless-stopped
    ports:
      - '3000:3000'
    depends_on:
      - server
    networks:
      - everytriv-network

  # pgAdmin - Web-based PostgreSQL administration (Development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: everytriv-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@everytriv.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - everytriv-network
    profiles:
      - dev

  # Redis Commander - Web-based Redis administration (Development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: everytriv-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:R3d!s_Pr0d_P@ssw0rd_2025_S3cur3!
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - everytriv-network
    profiles:
      - dev

  # WebDB - Modern web-based database client
  webdb:
    image: webdb/app:latest
    container_name: everytriv-webdb
    restart: unless-stopped
    ports:
      - "127.0.0.1:22071:22071"
    volumes:
      - webdb_data:/usr/src/app/static/version
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - everytriv-network

volumes:
  postgres_data:
  redis_data:
  webdb_data:

networks:
  everytriv-network:
    driver: bridge
