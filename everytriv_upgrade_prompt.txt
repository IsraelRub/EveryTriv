
# Prompt: Full Architecture Upgrade and Feature Integration for EveryTriv

You are tasked with fully upgrading and enhancing the EveryTriv projectâ€”a trivia platform built with React (TypeScript) and NestJSâ€”according to the following unified and strict specification.

## Primary Directives:
Perform all actions without asking follow-up questions, and do not stop until every item is fully implemented, validated, tested, and optimized. Ensure no unnecessary imports/exports, no redundant code, and complete synchronization across all layers (frontend/backend, state, DB, UI, UX, logic, documentation).

## ðŸ”§ Required Enhancements:

### 1. Custom 404 Page
- Create a custom-designed 404 page consistent with the projectâ€™s current visual theme.
- Integrate it with React Router as the default fallback for unknown routes.

### 2. Trivia Question Limit
- Enforce that the number of trivia questions per session can only be 3, 4, or 5.
- Validate input in both the frontend and backend.

### 3. Icons Import
- Replace all hardcoded icons with ones from external libraries, such as:
  - lucide-react (primary)
  - Allow room for additional libraries (e.g., react-icons, phosphor-react)
- Ensure icons are imported efficiently and consistently.

### 4. Documentation
- Generate and update full technical documentation for the entire project.
- Place all documentation in a centralized /docs directory.
- Include:
  - Architecture overview
  - Component and API references
  - Setup instructions
  - Entity diagrams
  - Deployment notes
  - Developer contribution guide

### 5. Input Validation via External API
- Evaluate whether to use:
  - https://api.languagetool.org/v2/check
  - Or an alternative LLM-based or open-source solution
- Implement a single validation flow before sending user input to the server.
- Justify and document the chosen validation method.
- Integrate it in both:
  - The client (shared/services/inputValidation.ts)
  - The server (src/common/validation/)

### 6. Centralized TypeScript Interfaces
- Relocate and consolidate all TS interfaces/types into a single shared directory:
  - src/shared/types/
- Eliminate duplicate or conflicting types.

### 7. Improved Database Architecture
- Ensure seamless synchronization and performance optimization across:
  - localStorage (client)
  - Redis (in-memory cache)
  - PostgreSQL (primary DB)
- Tasks:
  - Configure fallback and hydration logic
  - Sync important keys and TTL strategies
  - Design Redis as a middle layer (cache-first strategy)
  - Use JSONB fields and full-text search in PostgreSQL
  - Implement Redis pub/sub for real-time data sync if applicable

### 8. Frontend Architecture Refactor
- Upgrade React codebase to modular and scalable structure:
  src/
  â”œâ”€â”€ redux/             # All state slices
  â”œâ”€â”€ shared/
  â”‚   â”œâ”€â”€ components/
  â”‚   â”‚   â”œâ”€â”€ ui/
  â”‚   â”‚   â”œâ”€â”€ layout/
  â”‚   â”‚   â””â”€â”€ game/
  â”‚   â”œâ”€â”€ hooks/
  â”‚   â”œâ”€â”€ services/
  â”‚   â”œâ”€â”€ utils/
  â”‚   â”œâ”€â”€ types/
  â”‚   â””â”€â”€ constants/
  â”œâ”€â”€ views/             # Thin route-level components
  â””â”€â”€ App.tsx
- Move all business logic into custom hooks
- Add Redux slices for: game, stats, favorites, user
- Implement loading states and error boundaries
- Use Suspense, React.memo, useMemo, and useCallback where necessary
- Standardize naming conventions (camelCase, PascalCase)

### 9. Backend Enhancements (NestJS)
- Migrate DB to PostgreSQL
- Use TypeORM with JSONB columns
- Add:
  - Full-text indexes
  - Composite indexes
  - Caching decorators
- Replace array-based queue with:
  - Binary Heap Priority Queue
  - LRU Cache (Doubly Linked List + Hash Map)
  - Trie (autocomplete)
  - Circular Buffer (track recent trivia)
- Enhance services with:
  - Multi-level caching: Memory â†’ Redis â†’ Postgres
  - Smart LLM provider routing with fallback
  - Provider health metrics
  - Load-balanced topic queues

### 10. Testing and Validation
- Implement:
  - Unit tests for Redux slices, custom hooks, and data structures
  - Integration tests for DB and caching
  - Performance benchmarks (before/after)
  - Error boundaries and retry logic
- Use mocks where needed for external APIs

## âœ… Final Checklist Before Finishing:
- [ ] All Redux slices created, typed, and tested
- [ ] UI and business logic separated
- [ ] All hooks return properly typed values
- [ ] All async flows have loading/error states
- [ ] New 404 page implemented and routed
- [ ] Only 3/4/5 questions selectable
- [ ] All icons sourced from external libraries
- [ ] Documentation complete in /docs
- [ ] Redis â†” Postgres â†” localStorage sync tested
- [ ] All validation logic centralized
- [ ] PostgreSQL fully configured and optimized
- [ ] All components stateless where possible
- [ ] All code formatted, linted, and production-ready

ðŸ“Œ Begin implementation immediately. Do not pause, ask questions, or wait for confirmation. Complete everything sequentially, accurately, and with full validation before ending.
