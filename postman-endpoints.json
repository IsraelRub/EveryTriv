{
  "info": {
    "name": "EveryTriv API Collection",
    "description": "üéØ **COMPLETE API COLLECTION FOR EVERYTRIV TRIVIA PLATFORM**\n\n**Platform Overview:**\nEveryTriv is a comprehensive trivia game platform featuring AI-powered question generation, real-time multiplayer capabilities, advanced analytics, and a complete user management system.\n\n**Key Features:**\n- ü§ñ **AI-Powered Questions:** Multiple AI providers (OpenAI, Anthropic, Google, Mistral)\n- üéÆ **Multiple Game Modes:** Classic, Time Attack, Custom Difficulty\n- üèÜ **Leaderboards:** Global, weekly, monthly rankings\n- üí∞ **Points System:** Earn and spend points for gameplay\n- üìä **Advanced Analytics:** User performance, game statistics, system metrics\n- üîê **Complete Auth:** JWT-based authentication with role management\n- üí≥ **Payment Integration:** Stripe integration for premium features\n- üì± **Real-time Updates:** WebSocket support for live gameplay\n\n**Authentication:**\n- Most endpoints require JWT token in Authorization header\n- Admin endpoints require 'admin' or 'super-admin' role\n- Public endpoints marked with @Public() decorator\n\n**Rate Limiting:**\n- Login: 5 attempts per minute\n- Registration: 3 attempts per 5 minutes\n- Game actions: 20 per minute\n- Admin actions: 5 per minute\n\n**Base URL:** http://localhost:3001 (development)\n**API Version:** v1\n**Documentation:** See /docs for Swagger documentation",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "username",
      "value": "",
      "type": "string"
    },
    {
      "key": "userRole",
      "value": "",
      "type": "string"
    },
    {
      "key": "gameId",
      "value": "",
      "type": "string"
    },
    {
      "key": "questionId",
      "value": "",
      "type": "string"
    },
    {
      "key": "pointsBalance",
      "value": "",
      "type": "string"
    },
    {
      "key": "subscriptionId",
      "value": "",
      "type": "string"
    },
    {
      "key": "paymentId",
      "value": "",
      "type": "string"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-set baseUrl if not set",
          "if (!pm.variables.get('baseUrl')) {",
          "    pm.variables.set('baseUrl', 'http://localhost:3001');",
          "}",
          "",
          "// Auto-add Authorization header for protected endpoints",
          "const accessToken = pm.variables.get('accessToken');",
          "if (accessToken && !pm.request.headers.has('Authorization')) {",
          "    pm.request.headers.add({",
          "        key: 'Authorization',",
          "        value: 'Bearer ' + accessToken",
          "    });",
          "}",
          "",
          "// Auto-replace placeholders",
          "const userId = pm.variables.get('userId');",
          "const username = pm.variables.get('username');",
          "const gameId = pm.variables.get('gameId');",
          "const questionId = pm.variables.get('questionId');",
          "const subscriptionId = pm.variables.get('subscriptionId');",
          "const paymentId = pm.variables.get('paymentId');",
          "",
          "if (userId) {",
          "    pm.request.url = pm.request.url.toString().replace('user_id_here', userId);",
          "}",
          "",
          "if (username) {",
          "    pm.request.url = pm.request.url.toString().replace('username_here', username);",
          "}",
          "",
          "if (gameId) {",
          "    pm.request.url = pm.request.url.toString().replace('game_id_here', gameId);",
          "}",
          "",
          "if (questionId) {",
          "    pm.request.url = pm.request.url.toString().replace('question_id_here', questionId);",
          "}",
          "",
          "if (subscriptionId) {",
          "    pm.request.url = pm.request.url.toString().replace('subscription_id_here', subscriptionId);",
          "}",
          "",
          "if (paymentId) {",
          "    pm.request.url = pm.request.url.toString().replace('payment_id_here', paymentId);",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-save tokens from login/register responses",
          "if (pm.response.code === 200 || pm.response.code === 201) {",
          "    try {",
          "        const responseJson = pm.response.json();",
          "        ",
          "        // Save access token",
          "        if (responseJson.access_token) {",
          "            pm.variables.set('accessToken', responseJson.access_token);",
          "        }",
          "        ",
          "        // Save refresh token",
          "        if (responseJson.refresh_token) {",
          "            pm.variables.set('refreshToken', responseJson.refresh_token);",
          "        }",
          "        ",
          "        // Save user info",
          "        if (responseJson.user) {",
          "            pm.variables.set('userId', responseJson.user.id);",
          "            pm.variables.set('username', responseJson.user.username);",
          "            if (responseJson.user.role) {",
          "                pm.variables.set('userRole', responseJson.user.role);",
          "            }",
          "        }",
          "        ",
          "        // Save user info from data.user (for register response)",
          "        if (responseJson.data && responseJson.data.user) {",
          "            pm.variables.set('userId', responseJson.data.user.id);",
          "            pm.variables.set('username', responseJson.data.user.username);",
          "            if (responseJson.data.user.role) {",
          "                pm.variables.set('userRole', responseJson.data.user.role);",
          "            }",
          "        }",
          "    } catch (e) {",
          "        // Ignore parsing errors",
          "    }",
          "}",
          "",
          "// Auto-save user info from profile responses",
          "if (pm.response.code === 200 && pm.request.url.path.includes('profile')) {",
          "    try {",
          "        const responseJson = pm.response.json();",
          "        if (responseJson.id) {",
          "            pm.variables.set('userId', responseJson.id);",
          "        }",
          "        if (responseJson.username) {",
          "            pm.variables.set('username', responseJson.username);",
          "        }",
          "        if (responseJson.role) {",
          "            pm.variables.set('userRole', responseJson.role);",
          "        }",
          "    } catch (e) {",
          "        // Ignore parsing errors",
          "    }",
          "}",
          "",
          "// Auto-save game/question IDs and other data",
          "if (pm.response.code === 200 || pm.response.code === 201) {",
          "    try {",
          "        const responseJson = pm.response.json();",
          "        ",
          "        // Save game ID",
          "        if (responseJson.gameId) {",
          "            pm.variables.set('gameId', responseJson.gameId);",
          "        }",
          "        ",
          "        // Save question ID",
          "        if (responseJson.questionId) {",
          "            pm.variables.set('questionId', responseJson.questionId);",
          "        }",
          "        ",
          "        // Save points balance",
          "        if (responseJson.points !== undefined) {",
          "            pm.variables.set('pointsBalance', responseJson.points.toString());",
          "        }",
          "        ",
          "        // Save subscription ID",
          "        if (responseJson.subscriptionId) {",
          "            pm.variables.set('subscriptionId', responseJson.subscriptionId);",
          "        }",
          "        ",
          "        // Save payment ID",
          "        if (responseJson.paymentId) {",
          "            pm.variables.set('paymentId', responseJson.paymentId);",
          "        }",
          "        ",
          "        // Save from nested data",
          "        if (responseJson.data) {",
          "            if (responseJson.data.gameId) {",
          "                pm.variables.set('gameId', responseJson.data.gameId);",
          "            }",
          "            if (responseJson.data.questionId) {",
          "                pm.variables.set('questionId', responseJson.data.questionId);",
          "            }",
          "            if (responseJson.data.subscriptionId) {",
          "                pm.variables.set('subscriptionId', responseJson.data.subscriptionId);",
          "            }",
          "            if (responseJson.data.paymentId) {",
          "                pm.variables.set('paymentId', responseJson.data.paymentId);",
          "            }",
          "        }",
          "    } catch (e) {",
          "        // Ignore parsing errors",
          "    }",
          "}"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "üè† App & Health",
      "description": "üè† **APPLICATION HEALTH & BASIC ENDPOINTS**\n\n**Purpose:** Monitor application health, get basic information, and verify system status\n\n**Authentication Requirements:**\n- üîì **Public Endpoints:** All health and info endpoints\n\n**Key Features:**\n- Application health monitoring\n- System information retrieval\n- Basic connectivity testing\n- Service status verification\n\n**Available Endpoints:**\n- Health Check (GET)\n- App Info (GET)\n\n**Use Cases:**\n- System monitoring\n- Health checks\n- Basic connectivity testing\n- Service verification",
      "item": [
        {
          "name": "App Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            }
          }
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["info"]
            }
          }
        }
      ]
    },
    {
      "name": "üîê Authentication",
      "description": "üîê **AUTHENTICATION & AUTHORIZATION ENDPOINTS**\n\n**Purpose:** Handle user authentication, authorization, and session management\n\n**Authentication Requirements:**\n- üîì **Public Endpoints:** Registration, login, refresh, OAuth\n- üîê **Protected Endpoints:** Current user, logout, admin users\n\n**Key Features:**\n- JWT-based authentication\n- OAuth integration (Google)\n- Role-based access control\n- Session management\n- Token refresh mechanism\n- Admin user management\n\n**Available Endpoints:**\n- Register User (POST)\n- Login User (POST)\n- Refresh Token (POST)\n- Get Current User (GET)\n- Logout (POST)\n- Google OAuth Login (GET)\n- Google OAuth Callback (GET)\n- Get Admin Users (GET)\n\n**Security Features:**\n- Rate limiting on sensitive endpoints\n- Password hashing and validation\n- JWT token expiration\n- Role-based permissions\n- OAuth 2.0 integration",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin_user\",\n  \"email\": \"admin@everytriv.com\",\n  \"password\": \"AdminPass123!\",\n  \"firstName\": \"Admin\",\n  \"lastName\": \"User\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin_user\",\n  \"password\": \"AdminPass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Auto-use saved refresh token",
                  "const refreshToken = pm.variables.get('refreshToken');",
                  "if (refreshToken) {",
                  "    pm.request.body.raw = JSON.stringify({",
                  "        refreshToken: refreshToken",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            }
          }
        },
        {
          "name": "Get Current User",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "me"]
            }
          }
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            }
          }
        },
        {
          "name": "Google OAuth Login",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/google",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "google"]
            }
          }
        },
        {
          "name": "Google OAuth Callback",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/google/callback",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "google", "callback"]
            }
          }
        },
        {
          "name": "Get Admin Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/admin/users",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "admin", "users"]
            }
          }
        }
      ]
    },
    {
      "name": "üë§ User Management",
      "description": "üë§ **USER MANAGEMENT ENDPOINTS** - User Profile & Account Management\n\n**Purpose:** Manage user profiles, preferences, credits, and account operations\n\n**Authentication Requirements:**\n- üîì **Public Endpoints:** User search, public profiles\n- üîê **Protected Endpoints:** Profile management, preferences, credits\n- üëë **Admin Endpoints:** User administration, status management\n\n**Key Features:**\n- Complete profile management\n- User preferences (theme, language, notifications)\n- Credit system integration\n- User search functionality\n- Admin user management\n- Account deletion and status updates\n\n**Available Endpoints:**\n- Get User Profile (GET)\n- Update User Profile (PUT)\n- Update User Field (PATCH)\n- Get User Credits (GET)\n- Deduct User Credits (POST)\n- Search Users (GET)\n- Get User by Username (GET)\n- Get User by ID (GET)\n- Delete User Account (DELETE)\n- Update User Preferences (PUT)\n- Update Single Preference (PATCH)\n- Update User Credits (Admin) (PUT)\n- Delete User (Admin) (DELETE)\n- Update User Status (Admin) (PATCH)\n- Get All Users (Admin) (GET)\n- Admin Update User Status (PUT)\n\n**User Operations:**\n- Profile management\n- Preference settings\n- Credit management\n- Account operations\n- User search and discovery\n- Admin user administration",
      "item": [
        {
          "name": "Get User Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/profile",
              "host": ["{{baseUrl}}"],
              "path": ["users", "profile"]
            }
          }
        },
        {
          "name": "Update User Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Updated\",\n  \"lastName\": \"Name\",\n  \"email\": \"updated@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/profile",
              "host": ["{{baseUrl}}"],
              "path": ["users", "profile"]
            }
          }
        },
        {
          "name": "Update User Field (Make Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Check if role update was successful",
                  "if (pm.response.code === 200) {",
                  "    try {",
                  "        const responseJson = pm.response.json();",
                  "        console.log('‚úÖ Role updated successfully!');",
                  "        ",
                  "        if (responseJson.role === 'admin') {",
                  "            console.log('üéâ You are now an ADMIN! You can access admin endpoints.');",
                  "        }",
                  "    } catch (e) {",
                  "        console.log('‚úÖ Role update successful (no JSON response)');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Role update failed:', pm.response.code);",
                  "    if (pm.response.json && pm.response.json().message) {",
                  "        console.log('Error:', pm.response.json().message);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"value\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/profile/role",
              "host": ["{{baseUrl}}"],
              "path": ["users", "profile", "role"]
            }
          }
        },
        {
          "name": "Get User Credits",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/credits",
              "host": ["{{baseUrl}}"],
              "path": ["users", "credits"]
            }
          }
        },
        {
          "name": "Deduct User Credits",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 10,\n  \"reason\": \"Game play\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/credits",
              "host": ["{{baseUrl}}"],
              "path": ["users", "credits"]
            }
          }
        },
        {
          "name": "Search Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/search?query=admin&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["users", "search"],
              "query": [
                {
                  "key": "query",
                  "value": "admin"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Get User by Username",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/username/admin_user",
              "host": ["{{baseUrl}}"],
              "path": ["users", "username", "admin_user"]
            }
          }
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/user_id_here",
              "host": ["{{baseUrl}}"],
              "path": ["users", "user_id_here"]
            }
          }
        },
        {
          "name": "Delete User Account",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/account",
              "host": ["{{baseUrl}}"],
              "path": ["users", "account"]
            }
          }
        },
        {
          "name": "Update User Preferences",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"theme\": \"dark\",\n  \"language\": \"he\",\n  \"notifications\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/preferences",
              "host": ["{{baseUrl}}"],
              "path": ["users", "preferences"]
            }
          }
        },
        {
          "name": "Update Single Preference",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"value\": \"dark\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/preferences/theme",
              "host": ["{{baseUrl}}"],
              "path": ["users", "preferences", "theme"]
            }
          }
        },
        {
          "name": "Update User Credits (Admin)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"credits\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/credits/user_id_here",
              "host": ["{{baseUrl}}"],
              "path": ["users", "credits", "user_id_here"]
            }
          }
        },
        {
          "name": "Delete User (Admin)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/user_id_here",
              "host": ["{{baseUrl}}"],
              "path": ["users", "user_id_here"]
            }
          }
        },
        {
          "name": "Update User Status (Admin)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"active\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/user_id_here/status",
              "host": ["{{baseUrl}}"],
              "path": ["users", "user_id_here", "status"]
            }
          }
        },
        {
          "name": "Get All Users (Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/admin/all",
              "host": ["{{baseUrl}}"],
              "path": ["users", "admin", "all"]
            }
          }
        },
        {
          "name": "Admin Update User Status",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"active\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/admin/user_id_here/status",
              "host": ["{{baseUrl}}"],
              "path": ["users", "admin", "user_id_here", "status"]
            }
          }
        }
      ]
    },
    {
      "name": "üéÆ Game Management",
      "description": "üéÆ **GAME MANAGEMENT ENDPOINTS** - Trivia Game Logic & History\n\n**Purpose:** Handle trivia game operations, question generation, answer submission, and game history\n\n**Authentication Requirements:**\n- üîì **Public Endpoints:** Question retrieval, game info\n- üîê **Protected Endpoints:** Answer submission, game history, validation\n- üëë **Admin Endpoints:** Game statistics, history management\n\n**Key Features:**\n- AI-powered question generation\n- Multiple difficulty levels\n- Custom difficulty validation\n- Language validation\n- Game history tracking\n- Answer submission and scoring\n- Performance analytics\n- Admin game management\n\n**Available Endpoints:**\n- Get Trivia Question by ID (GET)\n- Get Game by ID (GET)\n- Submit Answer (POST)\n- Generate Trivia Questions (POST)\n- Get Game History (GET)\n- Save Game History (POST)\n- Delete Game History (DELETE)\n- Clear Game History (DELETE)\n- Validate Custom Difficulty (POST)\n- Validate Language (POST)\n- Get Game Statistics (Admin) (GET)\n- Clear All Game History (Admin) (DELETE)\n\n**Game Operations:**\n- Question generation and retrieval\n- Answer submission and scoring\n- Game history management\n- Difficulty and language validation\n- Performance tracking\n- Admin game administration",
      "item": [
        {
          "name": "Get Trivia Question by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/game/trivia/question_id_here",
              "host": ["{{baseUrl}}"],
              "path": ["game", "trivia", "question_id_here"]
            }
          }
        },
        {
          "name": "Get Game by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/game/game_id_here",
              "host": ["{{baseUrl}}"],
              "path": ["game", "game_id_here"]
            }
          }
        },
        {
          "name": "Submit Answer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"questionId\": \"question_id_here\",\n  \"answer\": \"Answer A\",\n  \"timeSpent\": 15\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/game/answer",
              "host": ["{{baseUrl}}"],
              "path": ["game", "answer"]
            }
          }
        },
        {
          "name": "Generate Trivia Questions",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"science\",\n  \"difficulty\": \"medium\",\n  \"questionCount\": 5,\n  \"language\": \"en\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/game/trivia",
              "host": ["{{baseUrl}}"],
              "path": ["game", "trivia"]
            }
          }
        },
        {
          "name": "Get Game History",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/game/history",
              "host": ["{{baseUrl}}"],
              "path": ["game", "history"]
            }
          }
        },
        {
          "name": "Save Game History",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 100,\n  \"totalQuestions\": 5,\n  \"correctAnswers\": 4,\n  \"difficulty\": \"medium\",\n  \"topic\": \"science\",\n  \"gameMode\": \"CLASSIC\",\n  \"timeSpent\": 120,\n  \"creditsUsed\": 5,\n  \"questionsData\": []\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/game/history",
              "host": ["{{baseUrl}}"],
              "path": ["game", "history"]
            }
          }
        },
        {
          "name": "Delete Game History",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/game/history/game_id_here",
              "host": ["{{baseUrl}}"],
              "path": ["game", "history", "game_id_here"]
            }
          }
        },
        {
          "name": "Clear Game History",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/game/history",
              "host": ["{{baseUrl}}"],
              "path": ["game", "history"]
            }
          }
        },
        {
          "name": "Validate Custom Difficulty",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"difficulty\": \"custom\",\n  \"customSettings\": {\n    \"timeLimit\": 30,\n    \"hints\": 2\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/game/validate-custom",
              "host": ["{{baseUrl}}"],
              "path": ["game", "validate-custom"]
            }
          }
        },
        {
          "name": "Validate Language",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"language\": \"he\",\n  \"text\": \"◊ò◊ß◊°◊ò ◊ë◊¢◊ë◊®◊ô◊™\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/game/validate-language",
              "host": ["{{baseUrl}}"],
              "path": ["game", "validate-language"]
            }
          }
        },
        {
          "name": "Get Game Statistics (Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/game/admin/statistics",
              "host": ["{{baseUrl}}"],
              "path": ["game", "admin", "statistics"]
            }
          }
        },
        {
          "name": "Clear All Game History (Admin)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/game/admin/history/clear-all",
              "host": ["{{baseUrl}}"],
              "path": ["game", "admin", "history", "clear-all"]
            }
          }
        }
      ]
    },
    {
      "name": "üèÜ Leaderboard",
      "description": "üèÜ **LEADERBOARD ENDPOINTS** - Rankings & Competition\n\n**Purpose:** Manage user rankings, leaderboards, and competitive features\n\n**Authentication Requirements:**\n- üîì **Public Endpoints:** Global leaderboards, period rankings\n- üîê **Protected Endpoints:** User rankings, percentile, updates\n\n**Key Features:**\n- Global leaderboard system\n- Period-based rankings (weekly, monthly)\n- User percentile calculation\n- Ranking updates and management\n- Competitive statistics\n- Performance tracking\n\n**Available Endpoints:**\n- Get User Ranking (GET)\n- Update User Ranking (POST)\n- Get Global Leaderboard (GET)\n- Get Leaderboard by Period (GET)\n- Get User Percentile (GET)\n\n**Leaderboard Operations:**\n- User ranking retrieval\n- Global leaderboard access\n- Period-based rankings\n- Percentile calculations\n- Ranking updates\n- Competitive analytics",
      "item": [
        {
          "name": "Get User Ranking",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/leaderboard/user/ranking",
              "host": ["{{baseUrl}}"],
              "path": ["leaderboard", "user", "ranking"]
            }
          }
        },
        {
          "name": "Update User Ranking",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/leaderboard/user/update",
              "host": ["{{baseUrl}}"],
              "path": ["leaderboard", "user", "update"]
            }
          }
        },
        {
          "name": "Get Global Leaderboard",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/leaderboard/global?limit=10&offset=0",
              "host": ["{{baseUrl}}"],
              "path": ["leaderboard", "global"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            }
          }
        },
        {
          "name": "Get Leaderboard by Period",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/leaderboard/period/:period?limit=10&offset=0",
              "host": ["{{baseUrl}}"],
              "path": ["leaderboard", "period", ":period"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            }
          }
        },
        {
          "name": "Get User Percentile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/leaderboard/user/percentile",
              "host": ["{{baseUrl}}"],
              "path": ["leaderboard", "user", "percentile"]
            }
          }
        }
      ]
    },
    {
      "name": "üí∞ Points System",
      "description": "üí∞ **POINTS SYSTEM ENDPOINTS** - Credits & Monetization\n\n**Purpose:** Manage user points, credits, purchases, and monetization features\n\n**Authentication Requirements:**\n- üîì **Public Endpoints:** Point packages\n- üîê **Protected Endpoints:** Balance, history, purchases, deductions\n\n**Key Features:**\n- Point balance management\n- Credit system integration\n- Purchase packages\n- Transaction history\n- Game play deductions\n- Purchase confirmation\n- Monetization tracking\n\n**Available Endpoints:**\n- Get Point Balance (GET)\n- Get Point Packages (GET)\n- Check Can Play (GET)\n- Deduct Points (POST)\n- Get Point History (GET)\n- Purchase Points (POST)\n- Confirm Point Purchase (POST)\n\n**Points Operations:**\n- Balance checking and management\n- Package browsing and purchasing\n- Game play validation\n- Transaction history\n- Purchase confirmation\n- Credit deductions\n- Monetization analytics",
      "item": [
        {
          "name": "Get Point Balance",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/points/balance",
              "host": ["{{baseUrl}}"],
              "path": ["points", "balance"]
            }
          }
        },
        {
          "name": "Get Point Packages",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/points/packages",
              "host": ["{{baseUrl}}"],
              "path": ["points", "packages"]
            }
          }
        },
        {
          "name": "Check Can Play",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/points/can-play?gameType=trivia",
              "host": ["{{baseUrl}}"],
              "path": ["points", "can-play"],
              "query": [
                {
                  "key": "gameType",
                  "value": "trivia"
                }
              ]
            }
          }
        },
        {
          "name": "Deduct Points",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 10,\n  \"reason\": \"Game play\",\n  \"gameType\": \"trivia\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/points/deduct",
              "host": ["{{baseUrl}}"],
              "path": ["points", "deduct"]
            }
          }
        },
        {
          "name": "Get Point History",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/points/history?limit=20&offset=0",
              "host": ["{{baseUrl}}"],
              "path": ["points", "history"],
              "query": [
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            }
          }
        },
        {
          "name": "Purchase Points",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"packageId\": \"package_100\",\n  \"paymentMethod\": \"credit_card\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/points/purchase",
              "host": ["{{baseUrl}}"],
              "path": ["points", "purchase"]
            }
          }
        },
        {
          "name": "Confirm Point Purchase",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"tx_123456\",\n  \"paymentId\": \"pay_789012\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/points/confirm-purchase",
              "host": ["{{baseUrl}}"],
              "path": ["points", "confirm-purchase"]
            }
          }
        }
      ]
    },
    {
      "name": "üí≥ Payment System",
      "description": "üí≥ **PAYMENT SYSTEM ENDPOINTS** - Payment Processing & Transactions\n\n**Purpose:** Handle payment processing, transaction management, and financial operations\n\n**Authentication Requirements:**\n- üîê **Protected Endpoints:** All payment operations require authentication\n\n**Key Features:**\n- Payment processing\n- Transaction history\n- Financial tracking\n- Payment validation\n- Receipt management\n- Refund processing\n\n**Available Endpoints:**\n- Create Payment (POST)\n- Get Payment History (GET)\n\n**Payment Operations:**\n- Payment creation and processing\n- Transaction history retrieval\n- Payment validation\n- Financial tracking\n- Receipt management\n- Refund processing",
      "item": [
        {
          "name": "Create Payment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 29.99,\n  \"currency\": \"USD\",\n  \"paymentMethod\": \"credit_card\",\n  \"description\": \"Premium subscription\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/payment/create",
              "host": ["{{baseUrl}}"],
              "path": ["payment", "create"]
            }
          }
        },
        {
          "name": "Get Payment History",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/payment/history",
              "host": ["{{baseUrl}}"],
              "path": ["payment", "history"]
            }
          }
        }
      ]
    },
    {
      "name": "üìä Analytics",
      "description": "üìä **ANALYTICS ENDPOINTS** - Performance & Statistics\n\n**Purpose:** Provide comprehensive analytics, statistics, and performance metrics\n\n**Authentication Requirements:**\n- üîê **Protected Endpoints:** All analytics require authentication\n\n**Key Features:**\n- User performance analytics\n- User statistics and progress tracking\n- Activity monitoring and insights\n- Achievement tracking\n- Trend analysis and comparisons\n- Performance recommendations\n\n**Available Endpoints:**\n- Get User Statistics (GET)\n- Get User Performance (GET)\n- Get User Progress (GET)\n- Get User Activity (GET)\n- Get User Insights (GET)\n- Get User Recommendations (GET)\n- Get User Achievements (GET)\n- Get User Trends (GET)\n- Get User Comparison (GET)\n- Get User Summary (GET)\n\n**Analytics Operations:**\n- User performance tracking\n- Statistics and progress monitoring\n- Activity analysis and insights\n- Achievement tracking\n- Trend analysis and comparisons\n- Performance recommendations",
      "item": [
        {
          "name": "Get User Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/user-stats/:userId",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "user-stats", ":userId"]
            }
          }
        },
        {
          "name": "Get User Performance",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/user-performance/:userId",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "user-performance", ":userId"]
            }
          }
        },
        {
          "name": "Get User Progress",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/user-progress/:userId",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "user-progress", ":userId"]
            }
          }
        },
        {
          "name": "Get User Activity",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/user-activity/:userId",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "user-activity", ":userId"]
            }
          }
        },
        {
          "name": "Get User Insights",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/user-insights/:userId",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "user-insights", ":userId"]
            }
          }
        },
        {
          "name": "Get User Recommendations",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/user-recommendations/:userId",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "user-recommendations", ":userId"]
            }
          }
        },
        {
          "name": "Get User Achievements",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/user-achievements/:userId",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "user-achievements", ":userId"]
            }
          }
        },
        {
          "name": "Get User Trends",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/user-trends/:userId",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "user-trends", ":userId"]
            }
          }
        },
        {
          "name": "Get User Comparison",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/user-comparison/:userId",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "user-comparison", ":userId"]
            }
          }
        },
        {
          "name": "Get User Summary",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/user-summary/:userId",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "user-summary", ":userId"]
            }
          }
        }
      ]
    },
    {
      "name": "ü§ñ AI Providers",
      "description": "ü§ñ **AI PROVIDERS ENDPOINTS** - AI Service Management & Monitoring\n\n**Purpose:** Manage and monitor AI providers for question generation and system health\n\n**Authentication Requirements:**\n- üîì **Public Endpoints:** Health status\n- üëë **Admin Endpoints:** Statistics, provider count\n\n**Key Features:**\n- AI provider statistics\n- Provider health monitoring\n- Available provider count\n- Performance metrics\n- Service availability tracking\n- Provider management\n\n**Available Endpoints:**\n- Get AI Provider Stats (GET)\n- Get Available Providers Count (GET)\n- Get AI Providers Health (GET)\n\n**AI Operations:**\n- Provider statistics and monitoring\n- Health status checking\n- Performance metrics\n- Service availability\n- Provider management\n- System health tracking",
      "item": [
        {
          "name": "Get AI Provider Stats",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/ai-providers/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai-providers", "stats"]
            }
          }
        },
        {
          "name": "Get Available Providers Count",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/ai-providers/count",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai-providers", "count"]
            }
          }
        },
        {
          "name": "Get AI Providers Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/ai-providers/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai-providers", "health"]
            }
          }
        }
      ]
    },
    {
      "name": "üíæ Storage Management",
      "description": "üíæ **STORAGE MANAGEMENT ENDPOINTS** - Data Storage & Management\n\n**Purpose:** Manage application storage, data persistence, and storage operations\n\n**Authentication Requirements:**\n- üîì **Public Endpoints:** Storage metrics\n- üëë **Admin Endpoints:** Storage operations, data management\n\n**Key Features:**\n- Storage metrics and monitoring\n- Data storage and retrieval\n- Storage key management\n- Storage clearing and maintenance\n- Performance monitoring\n\n**Available Endpoints:**\n- Get Storage Metrics (GET)\n- Reset Storage Metrics (POST)\n- Get Storage Keys (GET)\n- Get Storage Item (GET)\n- Clear Storage (DELETE)\n\n**Storage Operations:**\n- Get storage metrics\n- Retrieve storage items\n- List storage keys\n- Clear storage data\n- Reset storage metrics\n- Data persistence management",
      "item": [
        {
          "name": "Get Storage Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/storage/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["storage", "metrics"]
            }
          }
        },
        {
          "name": "Reset Storage Metrics",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/storage/metrics/reset",
              "host": ["{{baseUrl}}"],
              "path": ["storage", "metrics", "reset"]
            }
          }
        },
        {
          "name": "Get Storage Keys",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/storage/keys",
              "host": ["{{baseUrl}}"],
              "path": ["storage", "keys"]
            }
          }
        },
        {
          "name": "Get Storage Item",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/storage/item/key_name",
              "host": ["{{baseUrl}}"],
              "path": ["storage", "item", "key_name"]
            }
          }
        },
        {
          "name": "Clear Storage",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/storage/clear",
              "host": ["{{baseUrl}}"],
              "path": ["storage", "clear"]
            }
          }
        }
      ]
    },
    {
      "name": "üóÑÔ∏è Cache Management",
      "description": "üóÑÔ∏è **CACHE MANAGEMENT ENDPOINTS** - Cache System & Performance\n\n**Purpose:** Manage cache system, performance optimization, and cache operations\n\n**Authentication Requirements:**\n- üëë **Admin Endpoints:** All cache operations require admin privileges\n\n**Key Features:**\n- Cache statistics and monitoring\n- Cache clearing and management\n- Key existence checking\n- TTL (Time To Live) management\n- Performance optimization\n- Cache health monitoring\n\n**Available Endpoints:**\n- Get Cache Stats (GET)\n- Clear Cache (DELETE)\n- Check Cache Key Exists (GET)\n- Get Cache TTL (GET)\n\n**Cache Operations:**\n- Cache statistics retrieval\n- Cache clearing and management\n- Key existence validation\n- TTL monitoring\n- Performance optimization\n- Cache health tracking",
      "item": [
        {
          "name": "Get Cache Stats",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/cache/stats",
              "host": ["{{baseUrl}}"],
              "path": ["cache", "stats"]
            }
          }
        },
        {
          "name": "Clear Cache",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/cache/clear",
              "host": ["{{baseUrl}}"],
              "path": ["cache", "clear"]
            }
          }
        },
        {
          "name": "Check Cache Key Exists",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/cache/exists/key_name",
              "host": ["{{baseUrl}}"],
              "path": ["cache", "exists", "key_name"]
            }
          }
        },
        {
          "name": "Get Cache TTL",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/cache/ttl/key_name",
              "host": ["{{baseUrl}}"],
              "path": ["cache", "ttl", "key_name"]
            }
          }
        }
      ]
    },
    {
      "name": "üìà Middleware Metrics",
      "description": "üìà **MIDDLEWARE METRICS ENDPOINTS** - Performance & System Monitoring\n\n**Purpose:** Monitor middleware performance, system metrics, and operational health\n\n**Authentication Requirements:**\n- üëë **Admin Endpoints:** All middleware metrics require admin privileges\n\n**Key Features:**\n- Middleware performance monitoring\n- System metrics tracking\n- Performance analytics\n- Metrics reset functionality\n- Operational health monitoring\n- System optimization insights\n\n**Available Endpoints:**\n- Get All Middleware Metrics (GET)\n- Get Specific Middleware Metrics (GET)\n- Reset Specific Middleware Metrics (DELETE)\n- Reset All Middleware Metrics (DELETE)\n\n**Metrics Operations:**\n- Performance monitoring\n- System metrics tracking\n- Metrics reset and management\n- Operational health analysis\n- Performance optimization\n- System insights",
      "item": [
        {
          "name": "Get All Middleware Metrics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/middleware-metrics",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "middleware-metrics"]
            }
          }
        },
        {
          "name": "Get Specific Middleware Metrics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/middleware-metrics/auth",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "middleware-metrics", "auth"]
            }
          }
        },
        {
          "name": "Reset Specific Middleware Metrics",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/middleware-metrics/auth",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "middleware-metrics", "auth"]
            }
          }
        },
        {
          "name": "Reset All Middleware Metrics",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/middleware-metrics",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "middleware-metrics"]
            }
          }
        }
      ]
    },
    {
      "name": "üìù Client Logs",
      "description": "üìù **CLIENT LOGS ENDPOINTS** - Client-Side Logging & Monitoring\n\n**Purpose:** Handle client-side logging, error tracking, and user behavior monitoring\n\n**Authentication Requirements:**\n- üîì **Public Endpoints:** Log submission (for error tracking)\n\n**Key Features:**\n- Client-side log collection\n- Error tracking and monitoring\n- User behavior analytics\n- Performance logging\n- Debug information collection\n- Real-time log processing\n\n**Available Endpoints:**\n- Submit Client Logs (POST)\n\n**Logging Operations:**\n- Client log submission\n- Error tracking and monitoring\n- User behavior analytics\n- Performance logging\n- Debug information collection\n- Real-time log processing",
      "item": [
        {
          "name": "Submit Client Logs",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"logs\": [\n    {\n      \"level\": \"info\",\n      \"message\": \"User clicked button\",\n      \"timestamp\": \"2024-01-01T00:00:00Z\",\n      \"context\": {\n        \"userId\": \"user123\",\n        \"action\": \"button_click\"\n      }\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/client-logs/batch",
              "host": ["{{baseUrl}}"],
              "path": ["client-logs", "batch"]
            }
          }
        }
      ]
    },
    {
      "name": "üìã Subscription Management",
      "description": "üìã **SUBSCRIPTION MANAGEMENT ENDPOINTS** - Plans & Billing\n\n**Purpose:** Manage subscription plans, billing, and premium features\n\n**Authentication Requirements:**\n- üîì **Public Endpoints:** Available plans\n- üîê **Protected Endpoints:** Current subscription, creation, cancellation\n\n**Key Features:**\n- Subscription plan management\n- Billing and payment integration\n- Premium feature access\n- Subscription lifecycle management\n- Plan comparison and selection\n- Billing history tracking\n\n**Available Endpoints:**\n- Get Available Plans (GET)\n- Get Current Subscription (GET)\n- Create Subscription (POST)\n- Cancel Subscription (DELETE)\n\n**Subscription Operations:**\n- Plan browsing and selection\n- Subscription creation and management\n- Billing and payment processing\n- Premium feature access\n- Subscription cancellation\n- Billing history tracking",
      "item": [
        {
          "name": "Get Available Plans",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/subscription/plans",
              "host": ["{{baseUrl}}"],
              "path": ["subscription", "plans"]
            }
          }
        },
        {
          "name": "Get Current Subscription",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscription/current",
              "host": ["{{baseUrl}}"],
              "path": ["subscription", "current"]
            }
          }
        },
        {
          "name": "Create Subscription",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"planId\": \"premium_monthly\",\n  \"paymentMethod\": \"credit_card\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/subscription/create",
              "host": ["{{baseUrl}}"],
              "path": ["subscription", "create"]
            }
          }
        },
        {
          "name": "Cancel Subscription",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscription/cancel",
              "host": ["{{baseUrl}}"],
              "path": ["subscription", "cancel"]
            }
          }
        }
      ]
    }
  ]
}
